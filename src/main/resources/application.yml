spring:
  kafka:
    properties:
      schema:
        registry:
          url: http://localhost:8081
  cloud:
    function:
      definition: createEventA;eventAtoEventB;receiveEventB;receiveEventA;
    stream:
      # Configuração para todos os bindings
      default:
        group: group-example
        producer:
          use-native-encoding: true
        consumer:
          use-native-decoding: true
      bindings:
        producer-out-0:
          destination: xpto
        createEventA-out-0:
          destination: xpto
        eventAtoEventB-in-0:
          destination: xpto
        eventAtoEventB-out-0:
          destination: xpto2
        receiveEventB-in-0:
          destination: xpto2
        receiveEventA-in-0:
          destination: xpto
          group: group-example-2
      #        eventGenericAtoEventGenericB-in-0:
      #          destination: xpto
      #        eventGenericAtoEventGenericB-out-0:
      #          destination: xpto2
      #        receiveEventGenericB:
      #          destination: xpto2
      kafka:
        binder:
          brokers:
            - localhost:29093
          configuration:
            security:
              protocol: SSL
            ssl:
              endpoint:
                identification:
                  algorithm: ""
              truststore:
                location: classpath:/ssl/localhost.truststore.pkcs12
                password: test1234
                type: PKCS12
              keystore:
                location: classpath:/ssl/localhost.keystore.pkcs12
                password: test1234
                type: PKCS12
              key:
                password: test1234
              keymanager:
                algorithm: PKIX
              trustmanager:
                algorithm: PKIX
              enabled:
                protocols: TLSv1.2,TLSv1.3
        #Configuração individual por Binding
        #        bindings:
        #          receiveEventA-in-0:
        #            producer:
        #              configuration:
        #                key:
        #                  serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
        #                value:
        #                  serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
        #            consumer:
        #              configuration:
        ##                client:
        ##                  id: group-example
        #                key:
        #                  deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
        #                value:
        #                  deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
        # Configuração para todos os producers
        default:
          producer:
            configuration:
              key:
                serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
              value:
                serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
          consumer:
            configuration:
              key:
                deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
              value:
                deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
              specific:
                avro:
                  reader: true
  integration:
    poller:
      fixed-delay: 5000
